Sat 04 Aug 2018
---------------

How to get lat and long into Calendars:
- add to command line (but that seems silly for calendars not based on latlong)
- have calendars read the amon.conf file (grumble - is that possible?)
- have people themselves add the LAT/LONG to the calendar files?

# keep gpio pins quiet (particularly the shutdown alarm)
if [ at boot time only? (uptime < 2 mins?)] 
if [ -s $WITTYPI ] ; then
 unmount rtc?
 wp.sh clear-all-alarms
fi

Is the "border" functionality the right "sense"?  for dusk2dawn, a positive border should make ontimes (in evening) EARLIER and V.V.

Does the border functionality work at all?

Should I merge the calendars/witty with calendars? (if not, why are they separated?)

Raoul Klima says: For owl studies : record from 30 minutes before sunset till 30 minutes after sunrise. 
https://en.wikipedia.org/wiki/Sunrise_equation

=======
TODO:
 are we still seeing AMONLOG "no such file"? entries? solve with watchdog wait for solo-boot.sh to finish).
 Then, continue to clean up cron.log, now that we have logexec() working
 - calls to set volume etc?
 - calls to wp.sh

TESTING:
  1. test original with "run for 10 mins without calendar".
  2. test original against "run overnight on a 1h-on-1h-off.sh calendar.
  3. test original against "run overnight on a witty pi and 1h-on-1h-off-calendar.
  try a CLAC
  tidy up all my old hardware by testing it out. bin the baddies.
  Get everything in cron.log properly logged into log() or logexe()

WAV Ragged Headers:
  -USR1 (split) fixes up header, (SIGINT, SIGTERM and SIGABRT) do not.
  Workaround 1: use "sleep" duration before kill [ with extra cleanup of tinies ]
  Workaround 2: write headerfix() (in "hexedit").  Call after SIGINT is sent (ie after a "stop")
  Real solution: inspect aplay.c (see upgrade-alsa.sh), confirm problem (in 1.1.6), report or fix.
       		 Look at code for play.c accepting interrupts.

MASTERSWITCH:
 My new solo this morning started with :
 2018-08-01_06-33-08: [amon[633]->main]: INFO: No statefile "/mnt/sdcard/amondata/logs/amon.state" - creating one ...
 2018-08-01_06-33-08: [amon[633]->main]: Creating statefile: amon MASTERSWITCH is "on"

 when calendar=off -> we call "stop" (right?). Without a witty pi, watchdog should turn us on again.  Why not?.
 With calendar: a stop will be "fixed" at next watchdog.
                a off  will never be recovered from (because statefile trumps calendar response).
 Do we need to re-instate MASTERSWITCH in /boot/amon.conf?

WATCHDOG LOCKING:
  1. watchdog() wait for solo-boot.sh to finish. (YES - surely? - particularly with long fsck times?)
  2. watchdog() avoid each other. [ Not needed - this happens rarely.  The boottime clustering I saw will be cured by above.

PROVISIONING:
 /var/lib/apt/lists has a 60M "Packages" file
 dailyProvision to also produce list of all files in / ordered by size
  
CC / img-compare.sh
  img-compare.sh should exit (if given $outfile), having produced a diff of the two hierarchies.  Consider fsdiff()
  do we put the "datecode" of dailyProvision anywhere inside the sosi?  Would be useful to test 
  echo "version" > /opt/solo/build-info.txt (could have entries like SOSI_VERSION=2018-01-01-02-03-03, SOLO_HEAD=xxx).

tidying up wp.sh <--> amon interface:
 Try running as if we are in a different timezone.
 there exist a file called wittyPi.log, generated by the utils of witty pi.  It grows in /home/amon/amon.
 what time format should we use to talk to each other:
   a. want users calendars to output "things sensible to the user".
   b. want to have a format within amon that we can "take 90 seconde off of" to account for boot time.
   c. need snooze protection - ensure we don't fall asleep again if we wake early.
   d.  There's only a few things we need from wp.sh:
     - set the rbttime
     - show the rbttime.
     - prepare for shutdown (? - what does it do?)

Calendars:
 reboot-time policy: The solo starts rebooting at the time you put in calendar.  It takes about 90 seconds to start recording.
 reboot times grow as sdcard fills up (is that it?) try a deep-clean to see.
 is there a fsck.log?
 Is there a systemd tool to profile reboot timings.

TODO (but not today):
  tidy up SB_VOLUME=20 in boot/amon.conf to be SB2_volume perhaps.
  tidy up names of sbplay2 and sbplay3 in asound.conf here.  Need to also change defs.sh at same time (and grep for others)
  old calendars to use "IFS=S read" trick obviating multiple calls to date.
  amon look for solo-boot.started but NOT solo-boot.finished, and waits (or exits).
  Does it support witty pi 1?
  add better led flash code, so the heartbeat happens only when we are actually recording (or the red light flashes than).
  put some pointers and examples in solo.git/boot/solo.conf and solo.git/solo.conf for acceptable timezones.  Also update doc on githubpages.
  !!!Must put bluetack over the raspberry pi 's power socket!!!!
  Why do cronjobs seem to cluster at boot time?  Are they buffered? or is it anacron or sumfink?
  can we glide over a reboot time set in the wittypi alarm, and just be up and stay up? (or should we keep zeroing that alarm?)

Other hardware:
  New hardware: new hardware should NOT get auto-detect, there are too many.
  Consider amon-bespoke.conf is included if it exists. (so users can quickly copy their conf files in there and go).
  support dodotronic 384. AUDIOHW=dodotronic384?
  http://www.audioinjector.net/rpi-zero (on order?)
  https://fe-pi.com/products
  Behringer U-CONTROL UCA202
  http://www.richardmudhar.com/
  http://www.aquarianaudio.com/h2a-hydrophone.html

---------------------------------------------------------------------------

Mon 30 Jul 2018
---------------
apt-get install -y wiringpi
git clone jdmc2@shub:git/amon 
echo "i2c-dev" >> /etc/modules (or sudo modprobe i2c-dev). Q: how should we leave the clock - as usual?  And expect wp.sh to unload and reload
 clock as it sees fit?  (is that load/unload loop corrupting?).

Sun 29 Jul 2018
---------------
NEXT: Take the new sosi.  Run it, 
      	       -- then look below at what's needed to get it running (grodon's gpio lib).
	       -- consider adding that stuff to the general build
	       -- make a new (internal) image with 200M of space.
	       Then start the dev cycle:
	       -- clone wpdev into /opt/git/amon2 (or sumfink).
	       -- get bounce to work.
	       -- edit the wp.sh file, to make it do anything new (just lumbering up...)
	       -- do the dev outlined below, and loop till it works.

??? move wittypi hardware over to model B (for audio and ethernet simultaneously).

make directory calendars/wp/
put a first25mins.sh calendar in there.  It returns 2 things on/off and time-of-restart (in local time).
./first25mins.sh
on xzulu
or...
off 22:00.

Sat 14 Jul 2018
---------------

ok, that bounce complains if /dev/rtc0 is mounted.  So at the top of it, we should unmount it.

Developing on the pi:

Now want to do some dev work.  How to get git working...
How to dev on a pi:
  go to git repo on pi (/opt/git/amon  /opt/solo)
  chown it all (cos it's roots):
  sudo chown -R amon.amon amon/

Now on shub, make a dev branch:
  cd git/amon
  git branch wpdev
  <make a change and commit>

Now back on the pi, pull from that branch.
  git pull jdmc2@shub:git/amon wpdev (pulls from that branch).
  sudo make install (to copy amon etc to /home/amon/amon).

loop as needed.

mv the wp stuff in git/tbox/wp into this dev branch:


Fri 06 Jul 2018
---------------
set up back in Sheelynn.  Running:
rsync -av jdmc2@shub:git/tbox/wittypi .          # (to sync)
sudo ./wittypi/dev/wittyPi-dev3/wp.sh bounce     # to reboot in 1 minute
sudo ./wittypi/dev/wittyPi-dev3/wp.sh status     # to show next reboot time. (and check clocks)

Wed 27 Jun 2018
---------------
Set up in fingal now, with a repo within git/tbox that will do as a briefcase.
REM: need to install gpio, and do the modules stuff.

Now - the witty pi code is keen to keep the RTC umounted, becuse it
wants to bit-twiddle the registers of the clock.  Fair enough.  We
should let the witty pi software do this.  But it does mean that the
timedatectl (or whatever) it is that SETS the RTC initially (or sync's
it), will not be able to run, once the witty pi code has done
anything, because the clock will be gone.  timedatectl registers no
rtc, when it's unmounted, so clearly it won't set it after an NTP
grab.  This is ok, cos witty pi stuff will only ever be run if the
WITTYPI=yes is in the solo.conf file, and people won't do that when
they are setting the clock. (ensure docs make this clear).


Mon 25 Jun 2018
---------------
Did a test - it started after 2 days.  Yahoo.  I also did a battery change during that, (albeit a really quick one), and it still worked.

Also just tested the audio with the soundblaster2play, and it worked with no buzzing, which is a relief.

Set up a directory for development under dev here so won't lose code if sdcard corrupts.

---------------------------------------------------------------------------

Next time: it works - run the wittyPi.sh script to set a time, then choose hidden 9 to shutdown.  Yay it reboots.

How to integrate: use calendar infrastructure, and if calendar call returns off XXX then set reboot time to XXX and shutdown.
OR : use the witty pi stuff as is, and let users learn the witty pi format from the witty pi website.
(which works better ?  Particularly for those who DON't have a witty pi?).


Thu 21 Jun 2018
---------------
Type "amon off", then type "sudo poweroff", and current draw drops to 26mW (0.0053A).
So - no it doesn't - the powerbank times out.  So moved the blue jumper "dummy load" to the "on" position.
Now, when I do "sudo poweroff" it goes down to 0mW, 24mW, 500mW (500 every 10 seconds, for a quick blip).  This keeps the powerbank alive.

Now need to see if I can get a "wake up at" thing going.  I hope for:

1) install bits from https://github.com/uugear/Witty-Pi-2/blob/master/installWittyPi.sh
   wget https://github.com/uugear/Witty-Pi-2/blob/master/installWittyPi.sh
   wget fails... so look at it in a browser...
   [dtparam stuff - I'm ignoring it.]
   [i2c-tools is already installed.]
   NEED: apt-get install -y wiringpi
   INSTALL wittypi stuff:
     wget http://www.uugear.com/repo/WittyPi2/LATEST -O wittyPi.zip
     unzip wittyPi.zip -d wittyPi
     sudo modprobe i2c-dev
     Need to add this to provision:
       echo "i2c-dev" >> /etc/modules (or on command line, from /boot/config.txt?)
2) find the "set wakeup time" bit of their code.
3) run it.
4) call poweroff.
5) wait for it to reboot.
And it did - once.  Then I "cleared all registers", and now it won't.  Grrr.
sudo i2cset -y 0x01 0x68 0x0E 0x05 (to enable alarm A - Startup alarm).
Nope that didn't work.

So I've hacked wittyPi.sh (the CLI) to have a secret option 9), which shutsdown now.  And it works.
Leaving it here for tonight - it works!!!


Older notes:
------------
Before doing this work:  Got these numbers from normal running solos.  The clac was really good.  The snowflake is ok, the SB3 is pisspoor.
snowflake=112mA, SB3=150mA, nousb-noclac=85mA, clac=85mA (same)

Notes from todo.txt:

Solo scheduler (with witty pi):
 compatible with existing calendars?
 does powerbank time out (and how does witty pi handle it).
 Problem: At shutdown time, need to set wakeup time.  How do I find "next" wakeuptime.
---------------------------------------------------------------------------

Wed 06 Jun 2018
---------------
booted a+ with "witty pi 2" on an ethernet dongle.

Noticed /dev/rtc0 detected as an DS1307 device.  And noticed "timedatectl", that rtc0 has been set from NTP and looks good.

All jumpers are in the "left" position.  Typed amon off to stop attempts to record audio.

What to do next? - get their software:

https://github.com/uugear/Witty-Pi-2/blob/master/installWittyPi.sh

does various things to initialise a raspbian system...  Looking through:
 installs wiringpi (from drogon), and then builds it.  ( I notice it's in apt-cache).
 installs wittypi2/LATEST from their own website.
 removes hw-clock-fake and other update-rc.d things.
 optionally installs QT5 (for some sort of GUI), which might be usable.

Goals:
	find out power usage when sleeping.
	fing out power usage when running (no diff?)
	but do the above with no ethernet connection (since it confuses power).
	 - install the power monitor now.
 	find the command that does "set wake time to 14:00", sleep - "sleepTill(wakeTime)"

	- does the power bank "time out". (what does the dummy load do).

	- find a way to get solo recording as soon as it boots (don't wait for first cron job).
	  - use a @boot entry in crontab?

        - get a red flash when recording is going (good for debug during witty-dev, and generally).
	  - get power readings with and without LED on.


Find a way for unsophisticated users to communicate their schedules to /boot/solo/wittypi/config.txt

---------------------------------------------------------------------------
LED experiments:
Turn both leds off:
root@solo:/sys/class/leds# echo default-on > led0/trigger
root@solo:/sys/class/leds# echo default-on > led1/trigger

with both on:  0.0769 mA (ethernet dongle is off, but going through witty pi2).
with both off: 0.0722 mA (diference of ~50mA)
---------------------------------------------------------------------------
