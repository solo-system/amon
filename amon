#!/bin/bash

umask 0022 # TODO - check this gives read to all (think vfat)

# get the pid of this instance of amon
AMONPID=$$

# always cd to amondir to make paths simple.
AMONDIR=`dirname $0`
cd ${AMONDIR}
BASE=. # think this can go.

#STATEFILE=${BASE}/state
#PIDFILE=${BASE}/pidfile

### read the config file(s) and function definitions.
[ ! -r defs.sh ] && echo "Fatal: no config file defs.sh. I give up." && exit -1
source defs.sh

[ ! -r amon.conf ] && echo "Fatal: no config file amon.conf. I give up." && exit -1
source amon.conf

[ -r /boot/amon.conf ] && { 
#    echo "Reading additional config file: /boot/amon.conf" 
    source /boot/amon.conf
}

if [ ! -d $AMONDATA ] ; then
    echo "Warning: can't find output directory $AMONDATA - instead using $HOME/amontmp/"
    AMONDATA=$HOME/amontmp
    mkdir -p $AMONDATA
fi

### these must come AFTER reading the configs.
WAVDIR=${AMONDATA}/wavs
LOGDIR=${AMONDATA}/logs
ALOG=${LOGDIR}/arecord.log
AMONLOG=${LOGDIR}/amon.log
STATEFILE=${LOGDIR}/amon.state
PIDFILE=${LOGDIR}/arecord.pid

# TODO: should use mkidir -p to do all these checks.
# what if there is no data directory?
if [ ! -d $WAVDIR ] ; then
    log "INFO: Creating data directory \"$WAVDIR\" for audio files"
    mkdir $WAVDIR 
fi

# Build log directory
if [ ! -d $LOGDIR ] ; then
    log "INFO: Creating data directory \"$LOGDIR\" for logs"
    mkdir $LOGDIR 
fi

# what if there is no state file?
if [ ! -r $STATEFILE ] ; then
  log "INFO: No statefile \"$STATEFILE\" - creating one ... "

  # Perhaps conf prescribed "off" or "on"???
  # choose logic so that if it is _anything_ but "off", we are on.
  if [ -n "$MASTERSWITCH" ] ; then
      log "Read MASTERSWITCH value from conf of \"$MASTERSWITCH\""
      if [ "$MASTERSWITCH" != "off" -a "$MASTERSWITCH" != "on"] ; then
	  log "Warning: badly formed MASTERSWITCH value of $MASTERSWITCH.  Assuming: \"on\""
	  MASTERSWITCH="on"
       fi
  else
      MASTERSWITCH=on
  fi

  log "Creating statefile: amon MASTERSWITCH is \"$MASTERSWITCH\""
  echo "$MASTERSWITCH" > $STATEFILE      
fi


##########################################
# parse command line
##########################################

# the below is a bit obscure.  It uses "type -t" to work out what the
# command line args are.  if the arg on the command "amon status",
# "status" is checked to see if it is a recognised function name
# (probably read from defs.sh), then run it.  Actually, look for
# amonstatus() function first and run that if it exists, then try
# status().  This prevents worries about "amon shutdown" shutting down
# the whole system.

[ $# -eq 0 ] && { usage; exit 0;}

if [ xx`type -t amon${1}` = xx"function" ] ; then
    amon${1} $*
elif [ xx`type -t $1` = xx"function" ] ; then
    $1 $*
else
    echo "amon: \"$1\": command not known to amon"
fi

exit 0
