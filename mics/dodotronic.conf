# This file is part of Solo (http://solo-system.github.io)

log "Initialising a Dodotronic UltraMic soundcard/microphone..." 

# This file is for the dodotronic ultrasonic microphones.
# I have 2 versions, the 200k, and the 384k Hz models
# See the bottom of this file for further notes.

# needs to trigger on 200 and 384 versions, and manufacturer isn't consistent:
# 2 [bits           ]: USB-Audio - UltraMic 200K 16 bits
#                      DODOTRONIC Technology   . UltraMic 200K 16 bits at usb..
# and
# 2 [r0             ]: USB-Audio - UltraMic384K 16bit r0
#                      DODOTRONIC Technology UltraMic384K 16bit r0 at usb..

SOUNDCARD_REGEXP="UltraMic" 

ALSACARD=$(grep "$SOUNDCARD_REGEXP" /proc/asound/cards | head -1 | awk '{print $1}')
HWDEVICE="-Dhw:$ALSACARD"                                                     
PLUGDEVICE="-Dplughw:$ALSACARD"                                               

infofile="/proc/asound/card${ALSACARD}/stream0"

log "[dodotronic.conf]: infofile is $infofile, the contents are:"
log "------------ beginning of infofile $infofile -------"
log " $(cat $infofile)"
log "------------ end of infofile $infofile -------------"

# How does the system describe this microphone?
micdescription=$(head -1 $infofile)
log "micdescription is: $micdescription"

# get the sample rate(s) supported by this microphone, and choose the largest:
srate=$(grep Rates: $infofile | awk '{print $NF}')
SAMPLERATE="-r$srate"
log "choosing biggest samplerate $SAMPLERATE"

# Hardwire channels: dodotronics are mono, and we have no "plug" to fake it.
CHANNELS="-c1"
log "hardwiring to one channel: $CHANNELS"

# Set the volume to 100%, or whatever is specified in amon.conf
if [ $DODO_VOLUME ] ; then
    log "choosing specified volume of DODO_VOLUME=$DODO_VOLUME"
    LOCAL_VOLUME=$DODO_VOLUME
else
    log "DODO_VOLUME not defined: choosing default volume of 100%"
    LOCAL_VOLUME="100%"
fi

# This fails for my dodotronic 200k, as it has no volume control.
# But the 384 does, and it works on that.
amixer $HWDEVICE set  Mic,0 $LOCAL_VOLUME

ABUFFER="--buffer-time=10000000"  # 10 second of buffer (is this any use? - what's the default?)

unset srate cardnum streamnum micdescription infofile

log "Done Initialising a Dodotronic UltraMic soundcard/microphone..." 

# ---------------------------------------------------------------------------
# NOTES on supporting dodotronic soundcards/microphones:

# we don't use the alsa "plug" functionality for the dodotronic mics.
# I make the assumption that the user wants the FASTEST possible sample rate.

# Laptop shows this for dodotronic 384k:
# 2 [r0             ]: USB-Audio - UltraMic384K 16bit r0
#                      DODOTRONIC Technology UltraMic384K 16bit r0 at usb-0000:00:14.0-3, full speed
		       
# and the 304k has the following controls:



# ---------------------------------------------------------------------------
# Below: older notes from pre 2019.

# model 200kHz (they do a 250kHz too, I think)
# It looks like this in /proc/asound/cards
# ----------------------------------------
#  2 [bits           ]: USB-Audio - UltraMic 200K 16 bits
#                      DODOTRONIC Technology   . UltraMic 200K 16 bits at usb-0000:00:1a.0-1.1, full s
#-----------------------------------------
# and this in lsusb:
# Bus 001 Device 008: ID 0869:0301  
# with no description.

# at 192kHz, datarate is 2x192000 bytes per second = 384,000 bytes / sec
# second.  An audio buffer of 10 seconds, will occupy 3.8M which is fine.

# The dodotronic says 200kHz on the box.  It's usb device name declares it's a 200kHz device.
# yet if you try to arecord from it at 200kHz, it baulks:
# arecord: main:617: bad speed value 200000
# so you HAVE to specify -r192000 on the arecord command line.
# However, arecord seems to quickly notice that it infact is communicating at 200kHz, and duly
# puts 200kHz in the 44-byte wav header of the output .wav file.

# this is odd, but we've worked around it.
# SAMPLERATE="-r200000" # this doesn't work!!! (see above)

# TODO: should check that the recorded audio is indeed actually at
# 200kHz, by checking using a known frequency generator..

# The "bits" name turns out to be unreliable, as a user reports their
# dodotronic 200k identifies itself as "r4". Therefore pick the card
# num and stream num from the path of the micdescription file (eg:
# /proc/asound/card1/stream0)

