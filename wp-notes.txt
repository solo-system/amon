Mon 30 Jul 2018
---------------

It's now 8pm, and I have a system flakily working on 5min cycle, but
the whole dev thing is a mess.  So need to consolidate before the day
is done:

Plan for tonight.


aims:
build things into a new sosi.
flash the sosi
Set the Calendar variable in /boot/amon.conf (and the WITTYPI=yes) 
Finally:  Leave a system running with 5 minute cycle time overnight.

TODO:
Can I just merge the two repos?  (test in sandpit)
what should happen to the old wp stuff in wpdev?
what should happen to this file (solomisc?)
is the code from uugear redistributable ?

mv the wittypi dev stuff into solomisc.git


---------------------------------------------------------------------------

sort out the logging in wp.sh (it needs to be root (or does it), but
the output doesnt get into amon.log - that's not good enough. And I
don't want to TOO closely integrate witty pi stuff, as many (most)
people won't use it.  bring higher level functions into defs.sh (witty defs .sh?) starting wp-????() and use those to do logging and stuff, and they can call wp.sh for the low level stuff.  What groups do I need to be in to get rid of the sudo stuff?  (i2cdev/gpio)


Why do cronjobs seem to cluster at boot time?  Are they buffered? or is it anacron or sumfink?
Think about a solo-boot.sh touching /var/run/solo-boot.done file, which amon checks for and either

amon stop SEEMS to leave a bedraggled (or perhaps not - try it properly)! send an amon split just before reboot call - cos we know that does a nice job (does it???)

can we glide over a reboot time set in the wittypi alarm, and just be up and stay up? (or should we keep zeroing that alarm?)

wakeup early protection against falling asleep again.

Put WITTYPI=yes in (amon.git or solo.git?)
Change solo.git/boot/solo.conf to have GMT not London/Europe.
change solo.git/solo.conf to have UTC (how can we tell where you are?)

There's only a few things we need from wp.sh:
- set the time
- show the time.
- prepare for shutdown (?)

remove the YAHOO line in the calendar stuff.

Mon 30 Jul 2018
---------------
apt-get install -y wiringpi
git clone jdmc2@shub:git/amon 
echo "i2c-dev" >> /etc/modules (or sudo modprobe i2c-dev). Q: how should we leave the clock - as usual?  And expect wp.sh to unload and reload
 clock as it sees fit?  (is that load/unload loop corrupting?).

NEXT: write wp.sh "set rbt" to take a hextime. DONE
THEN: change watchdog to do the alg below.#
THEN: add CALENDAR to /boot/amon.conf and see what happens.

TODO:
	every minute the watchdog will look at the calendar scripts.
	if it's a wittypi calendar (detect through command line), then call it.
	if it says on,
	    turn on the recording!
	if it says off,
	    ensure the rst is at least 2 mins in future...
	    set the rbt as rst - 1
	    call wittypisetRBT to rbt
	    call split (to clean audio)
	    call amon stop
	    call poweroff.
	    



Sun 29 Jul 2018
---------------
NEXT: Take the new sosi.  Run it, 
      	       -- then look below at what's needed to get it running (grodon's gpio lib).
	       -- consider adding that stuff to the general build
	       -- make a new (internal) image with 200M of space.
	       Then start the dev cycle:
	       -- clone wpdev into /opt/git/amon2 (or sumfink).
	       -- get bounce to work.
	       -- edit the wp.sh file, to make it do anything new (just lumbering up...)
	       -- do the dev outlined below, and loop till it works.

??? move wittypi hardware over to model B (for audio and ethernet simultaneously).

make directory calendars/wp/
put a first25mins.sh calendar in there.  It returns 2 things on/off and time-of-restart (in local time).
./first25mins.sh
on xzulu
or...
off 22:00.


Main script has a WITTYPI2=yes.
if [ $WITTYPI2 = "yes" ] then
   onoff xzulu = $(/wherever/calendars/wittypi/first24mins.sh)
   amon off
   set reboot time to xzulu
   poweroff.
fi

   

Sat 14 Jul 2018
---------------

ok, that bounce complains if /dev/rtc0 is mounted.  So at the top of it, we should unmount it.

Developing on the pi:

Now want to do some dev work.  How to get git working...
How to dev on a pi:
  go to git repo on pi (/opt/git/amon  /opt/solo)
  chown it all (cos it's roots):
  sudo chown -R amon.amon amon/

Now on shub, make a dev branch:
  cd git/amon
  git branch wpdev
  <make a change and commit>

Now back on the pi, pull from that branch.
  git pull jdmc2@shub:git/amon wpdev (pulls from that branch).
  sudo make install (to copy amon etc to /home/amon/amon).

loop as needed.

mv the wp stuff in git/tbox/wp into this dev branch:


Fri 06 Jul 2018
---------------
set up back in Sheelynn.  Running:
rsync -av jdmc2@shub:git/tbox/wittypi .          # (to sync)
sudo ./wittypi/dev/wittyPi-dev3/wp.sh bounce     # to reboot in 1 minute
sudo ./wittypi/dev/wittyPi-dev3/wp.sh status     # to show next reboot time. (and check clocks)

Wed 27 Jun 2018
---------------
Set up in fingal now, with a repo within git/tbox that will do as a briefcase.
REM: need to install gpio, and do the modules stuff.

Now - the witty pi code is keen to keep the RTC umounted, becuse it
wants to bit-twiddle the registers of the clock.  Fair enough.  We
should let the witty pi software do this.  But it does mean that the
timedatectl (or whatever) it is that SETS the RTC initially (or sync's
it), will not be able to run, once the witty pi code has done
anything, because the clock will be gone.  timedatectl registers no
rtc, when it's unmounted, so clearly it won't set it after an NTP
grab.  This is ok, cos witty pi stuff will only ever be run if the
WITTYPI=yes is in the solo.conf file, and people won't do that when
they are setting the clock. (ensure docs make this clear).


Mon 25 Jun 2018
---------------
Did a test - it started after 2 days.  Yahoo.  I also did a battery change during that, (albeit a really quick one), and it still worked.

Also just tested the audio with the soundblaster2play, and it worked with no buzzing, which is a relief.

Set up a directory for development under dev here so won't lose code if sdcard corrupts.

---------------------------------------------------------------------------

Next time: it works - run the wittyPi.sh script to set a time, then choose hidden 9 to shutdown.  Yay it reboots.

How to integrate: use calendar infrastructure, and if calendar call returns off XXX then set reboot time to XXX and shutdown.
OR : use the witty pi stuff as is, and let users learn the witty pi format from the witty pi website.
(which works better ?  Particularly for those who DON't have a witty pi?).


Thu 21 Jun 2018
---------------
Type "amon off", then type "sudo poweroff", and current draw drops to 26mW (0.0053A).
So - no it doesn't - the powerbank times out.  So moved the blue jumper "dummy load" to the "on" position.
Now, when I do "sudo poweroff" it goes down to 0mW, 24mW, 500mW (500 every 10 seconds, for a quick blip).  This keeps the powerbank alive.

Now need to see if I can get a "wake up at" thing going.  I hope for:

1) install bits from https://github.com/uugear/Witty-Pi-2/blob/master/installWittyPi.sh
   wget https://github.com/uugear/Witty-Pi-2/blob/master/installWittyPi.sh
   wget fails... so look at it in a browser...
   [dtparam stuff - I'm ignoring it.]
   [i2c-tools is already installed.]
   NEED: apt-get install -y wiringpi
   INSTALL wittypi stuff:
     wget http://www.uugear.com/repo/WittyPi2/LATEST -O wittyPi.zip
     unzip wittyPi.zip -d wittyPi
     sudo modprobe i2c-dev
     Need to add this to provision:
       echo "i2c-dev" >> /etc/modules (or on command line, from /boot/config.txt?)
2) find the "set wakeup time" bit of their code.
3) run it.
4) call poweroff.
5) wait for it to reboot.
And it did - once.  Then I "cleared all registers", and now it won't.  Grrr.
sudo i2cset -y 0x01 0x68 0x0E 0x05 (to enable alarm A - Startup alarm).
Nope that didn't work.

So I've hacked wittyPi.sh (the CLI) to have a secret option 9), which shutsdown now.  And it works.
Leaving it here for tonight - it works!!!


Older notes:
------------
Before doing this work:  Got these numbers from normal running solos.  The clac was really good.  The snowflake is ok, the SB3 is pisspoor.
snowflake=112mA, SB3=150mA, nousb-noclac=85mA, clac=85mA (same)

Notes from todo.txt:

Solo scheduler (with witty pi):
 compatible with existing calendars?
 does powerbank time out (and how does witty pi handle it).
 Problem: At shutdown time, need to set wakeup time.  How do I find "next" wakeuptime.
---------------------------------------------------------------------------

Wed 06 Jun 2018
---------------
booted a+ with "witty pi 2" on an ethernet dongle.

Noticed /dev/rtc0 detected as an DS1307 device.  And noticed "timedatectl", that rtc0 has been set from NTP and looks good.

All jumpers are in the "left" position.  Typed amon off to stop attempts to record audio.

What to do next? - get their software:

https://github.com/uugear/Witty-Pi-2/blob/master/installWittyPi.sh

does various things to initialise a raspbian system...  Looking through:
 installs wiringpi (from drogon), and then builds it.  ( I notice it's in apt-cache).
 installs wittypi2/LATEST from their own website.
 removes hw-clock-fake and other update-rc.d things.
 optionally installs QT5 (for some sort of GUI), which might be usable.

Goals:
	find out power usage when sleeping.
	fing out power usage when running (no diff?)
	but do the above with no ethernet connection (since it confuses power).
	 - install the power monitor now.
 	find the command that does "set wake time to 14:00", sleep - "sleepTill(wakeTime)"

	- does the power bank "time out". (what does the dummy load do).

	- find a way to get solo recording as soon as it boots (don't wait for first cron job).
	  - use a @boot entry in crontab?

        - get a red flash when recording is going (good for debug during witty-dev, and generally).
	  - get power readings with and without LED on.


Find a way for unsophisticated users to communicate their schedules to /boot/solo/wittypi/config.txt

---------------------------------------------------------------------------
LED experiments:
Turn both leds off:
root@solo:/sys/class/leds# echo default-on > led0/trigger
root@solo:/sys/class/leds# echo default-on > led1/trigger

with both on:  0.0769 mA (ethernet dongle is off, but going through witty pi2).
with both off: 0.0722 mA (diference of ~50mA)
---------------------------------------------------------------------------

TODO:
1. tidy up the old calendar files with the new "IFS=S read" trick from wittypi people (avoid multiple calls to date).
2. !!!Must put bluetack over the raspberry pi 's power socket!!!!
